from aiogram import types, F
from aiogram import filters
from aiogram.dispatcher.router import Router
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramMigrateToChat, TelegramBadRequest

import config
from bot.db import add_ticket, get_last_user_ticket, get_user, get_ticket_by_id
from bot.filters.user import IsRegistered, IsInBlacklist
from bot.keyboards import user as u_keyboard
from bot.keyboards import admin as a_keyboard
from bot.states.user import UserQuestionState
from bot.handlers.admin import admin_router

user_router = Router()
user_router.message.filter(~IsInBlacklist(), F.chat.type == "private")


async def send_start_message(message: types.Message) -> None:
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ CherryOn!\n–ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", 
                         reply_markup=u_keyboard.get_question_keyboard())


async def send_operator_start_message(query: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(UserQuestionState.start)
    await query.message.answer(
        "–û–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —è –æ—Ç–æ—à–ª—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –æ–Ω —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è",
        reply_markup=u_keyboard.get_cancel_keyboard())


async def send_cancel_message(query: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await send_start_message(message=query.message)


async def forward_question_to_operator_chat(message: types.Message, state: FSMContext) -> None:
    try:
        await add_ticket(content=message.text, user_id=message.from_user.id)
        ticket = await get_last_user_ticket(message.from_user.id)
        ticket_id = ticket[0]
        await message.bot.send_message(config.ADMIN_CHAT_ID,
                                       message.text + f"\n\nt.me/{message.from_user.username}\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {ticket_id}",
                                       reply_markup=a_keyboard.get_ticket_keyboard(ticket_id))
        await message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è")
        await state.set_state(UserQuestionState.waiting_for_operator)
    except Exception as e:
        print(config.ADMIN_CHAT_ID)
        print(e)
        await message.answer("üõü–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ—Ö–æ–∂–µ –≤—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ —á—Ç–æ-—Ç–æ –ø–æ–º–∏–º–æ —Ç–µ–∫—Å—Ç–∞.\n"
                             "üî§–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        

async def check_for_operator(message: types.Message, state: FSMContext) -> None: 
    ticket = await get_last_user_ticket(message.from_user.id)
    if ticket[5] and not ticket[2]:
        await state.set_state(UserQuestionState.in_process)
        await state.update_data({'admin_id': ticket[5]})
        await chat_with_operator(message, state)
    else:
        message.answer("–ö –≤–∞–º –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏—Å—Ç–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
     
    
async def chat_with_operator(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    await message.bot.send_message(data['admin_id'], text=message.text)


async def send_wrong_type_message(message: types.Message) -> None:
    await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –±—É–∫–≤–∞–º–∏ ü§ñ")


async def send_warn_message(message: types.Message) -> None:
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ ü§ñ")


user_router.message.register(send_start_message, filters.CommandStart())
user_router.message.register(forward_question_to_operator_chat, UserQuestionState.start)
user_router.callback_query.register(send_operator_start_message, F.data == "operator")
user_router.callback_query.register(send_cancel_message, F.data == "cancel")
user_router.callback_query.register(check_for_operator, UserQuestionState.waiting_for_operator)
user_router.callback_query.register(chat_with_operator, UserQuestionState.in_process)
user_router.message.register(send_wrong_type_message, ~F.text)
user_router.include_routers(admin_router)